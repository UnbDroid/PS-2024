from tkinter import *
from tkinter import messagebox


#! Gabarito | 5 | 7 | 3 | 4 | 7 | 2 |
# Criar a janela principal com fundo preto
root = Tk()
root.configure(bg="black")
root.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(), root.winfo_screenheight()))
# Vari√°veis para armazenar as perguntas e respostas
questions = [
    "Charada 1:\nEu sou um n√∫mero inteiro.\nSe voc√™ me dividir por 2, o meu quociente √© um n√∫mero inteiro e o meu resto √© nulo.\n\nAl√©m disso, se voc√™ olhar para Pi, eu estarei l√°.\nQue n√∫mero eu sou?",
    "Charada 2:\nSou um n√∫mero primo menor que 10.\nSe me elevar ao quadrado, subtra√≠rem 6 e multiplicarem por 3, obter√°s 81. Qual √© o meu n√∫mero?",
    "Charada 3:\nUm corpo acelerando em dire√ß√£o ao rosto do seu amigo a 10 m/s¬≤\ntem massa similar a de uma x√≠cara de 300 g,\nqual a for√ßa m√≠nima que voc√™ tem que aplicar para que ele n√£o se machuque?",
    "Charada 4:\nEu sou um n√∫mero inteiro positivo.\nQuando dividido por 2, resulto em um quociente inteiro e resto zero.\nAl√©m disso, minha origem est√° na soma dos cinco primeiros n√∫meros primos consecutivos,\ndividida por um primo distinto de 2.\nVoc√™ sabe quem sou eu?",
    "Charada 5:\nSou um n√∫mero primo menor que 10.\nSe me multiplicarem por 4, subtra√≠rem 10 e depois dividirem por 2, obter√£o 9.\nQual √© o meu n√∫mero??",
    "Charada 6:\nUm corpo acelerando em dire√ß√£o ao rosto do seu amigo a 10 m/s¬≤\ntem massa similar a de uma x√≠cara de 200 g,\nqual a for√ßa m√≠nima que voc√™ tem que aplicar para que ele n√£o se machuque.",
    "Parab√©ns, voc√™ concluiu a PRIMEIRA etapa :) üéÜüéÜ\nAgora seu desafio ser√° muito maior,o que teremos a seguir nesse angar de naves ??? hehe\nBoa sorte!\n\nEm um hangar de naves,\nEncontrei um tesouro perdido,\nCom ele, posso montar um c√≥digo,\nQue, em um mundo digital,\nMe levar√° a um novo caminho.\n\n",
    "Meu Deus, voc√™ n√£o desiste hein, vamos dificultar um pouquinho agora üëø\n\nAgora vamos pegar voc√™ espertinhoüî™üò°\n\n**Em uma espa√ßonave,\nDois mist√©rios est√£o escondidos,\nUm deles √© uma cifra,\nO outro √© uma chave.\nJuntos, eles formam um mist√©rio,\nMas qual √© esse mist√©rio?**\n\n",
    #!lembre-se, aqui ser√° o c√≥digo onde vamos dificultar, vai executar uma charada com um certo tempo de partida.
]

answers = [
    "1",  # 5
    "1",  # 7
    "1",  # 3
    "1",  # 4
    "1",  # 7
    "1",  # 2
    "onepieto",  #! Dica : O tesouro perdido s√£o as pe√ßas do √°baco, que representam os d√≠gitos de um n√∫mero na tabela ASCII.
    "1",
]

# √çndice da pergunta atual
question_index = 0

# Adicionar um r√≥tulo com a pergunta e texto branco
question = Label(
    root, text=questions[question_index], fg="white", bg="black", font=("Helvetica", 30)
)
question.pack()

# Adicionar uma entrada de texto com texto branco e fundo preto
answer_entry = Entry(root, width=50, fg="white", bg="black", font=("Helvetica", 30))
answer_entry.pack(pady=20)
answer_entry.focus_set()  # Faz o cursor aparecer na caixa de entrada

# Vari√°vel para armazenar o tempo restante
time_left = 2400  # 40 minutos


# Fun√ß√£o para atualizar o temporizador
def update_timer():
    global time_left
    # Se ainda houver tempo restante, diminuir o tempo e atualizar o r√≥tulo do temporizador
    if time_left > 0:
        time_left -= 1
        minutes = time_left // 60
        seconds = time_left % 60
        timer_label.config(
            text=f"Tempo restante: {minutes} minutos e {seconds} segundos"
        )
        # Agendar a pr√≥xima atualiza√ß√£o para daqui a 1 segundo (1000 milissegundos)
        root.after(1000, update_timer)
    # Se o tempo restante for 2399 segundos, mostrar a charada surpresa
    elif time_left == 2399:
        question.config(
            text="Charada surpresa: ..."
        )  # Substitua "..." pela charada surpresa
    else:
        messagebox.showinfo("Tempo esgotado", "O tempo acabou!")


# Adicionar um r√≥tulo para o temporizador
timer_label = Label(
    root,
    text=f"Tempo restante: {time_left} segundos",
    fg="red",
    bg="black",
    font=("Helvetica", 59),
)
timer_label.pack()


# Vari√°vel para rastrear se a charada surpresa j√° foi respondida
surprise_question_answered = False


# Fun√ß√£o para verificar a resposta
def check_answer():
    global question_index, time_left, surprise_question_answered
    # Pegar o valor da entrada de texto
    answer = answer_entry.get()
    # Verificar se a resposta √© para a charada surpresa
    if (
        time_left == 2399 and not surprise_question_answered and answer == "resposta"
    ):  # Substitua "resposta" pela resposta correta para a charada surpresa
        # Marcar a charada surpresa como respondida
        surprise_question_answered = True
        # Mostrar uma mensagem de sucesso
        messagebox.showinfo(
            "Sucesso", "Voc√™ respondeu corretamente √† charada surpresa!"
        )
        # Limpar a entrada de texto
        answer_entry.delete(0, "end")
    # Verificar se a resposta est√° correta
    elif answer == answers[question_index]:
        # Avan√ßar para a pr√≥xima pergunta
        question_index += 1
        # Se ainda houver perguntas, mostrar a pr√≥xima pergunta
        if question_index < len(questions):
            question.config(text=questions[question_index])
            # Limpar a entrada de texto
            answer_entry.delete(0, "end")
        else:
            messagebox.showinfo("Fim", "Parab√©ns, voc√™ respondeu todas as perguntas!")
    else:
        # Diminuir o tempo restante em 15 segundos
        time_left -= 15
        messagebox.showinfo("Falha", "Resposta incorreta!")


# Adicionar um bot√£o que chama a fun√ß√£o check_answer quando clicado
check_button = Button(
    root,
    text="Verificar resposta",
    command=check_answer,
    fg="white",
    bg="black",
    font=("Helvetica", 30),
)
check_button.pack()

# Iniciar o temporizador
update_timer()

# Iniciar o loop principal
root.mainloop()
